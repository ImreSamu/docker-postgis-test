name: TEST - Docker PostGIS CI

# testing : https://github.com/postgis/docker-postgis/pull/432
# original author: https://github.com/BowlesCR

on:
  push:
  pull_request:
  workflow_dispatch:
  schedule:
    - cron: '15 13 * * *'

# ============================================================================
# FOR FORKING: Modify these settings in your forked repository
# ============================================================================
env:
  DOCKERHUB_REPO: imresamu/docker-postgis-test  # Change to your DockerHub repo
  GITHUB_REPO: ImreSamu/docker-postgis-test     # Change to your GitHub repo
  LATEST_DEFAULT_VERSION: 17-3.5                # Default version to tag as 'latest' (multi-arch)
  DOCKERHUB_SHORT_DESCRIPTION: "TEST REPO - PostGIS Docker"  # Short description for Docker Hub
  DOCKERHUB_README_PREFIX: "# ðŸš¨ **IGNORE: This is a TEST repository ONLY!** ðŸš¨ \n \n \n "  # Prefix to add to Docker Hub README (empty = no prefix)
#
# Also add these secrets in your repository settings:
#   https://github.com/${GITHUB_REPO}/settings/secrets/actions
#   - secrets.DOCKERHUB_USERNAME
#   - secrets.DOCKERHUB_ACCESS_TOKEN    ( READ, Write, Delete access )
# ============================================================================

defaults:
  run:
    shell: bash

jobs:

  setup:
    # This job sets up configuration constants and loads the CI matrix from matrix.yml.
    # - Constants: CANONICAL_REPO and SHOULD_PUBLISH flag (fork-friendly configuration)
    # - Matrix: build_include and merge_include arrays (automatically generated by ./update.sh)
    name: Setup and Load Configuration
    runs-on: ubuntu-latest
    outputs:
      CANONICAL_REPO: ${{ steps.constants.outputs.CANONICAL_REPO }}
      SHOULD_PUBLISH: ${{ steps.constants.outputs.SHOULD_PUBLISH }}
      build_include: ${{ steps.load-matrix.outputs.build_include }}
      merge_include: ${{ steps.load-matrix.outputs.merge_include }}
    steps:
      - name: Set constants
        id: constants
        env:
          VAR_CANONICAL: ${{ vars.CANONICAL_REPO }}
        run: |
          CANONICAL_REPO="${VAR_CANONICAL:-$GITHUB_REPO}"
          echo "CANONICAL_REPO=$CANONICAL_REPO" >> "$GITHUB_OUTPUT"

          # Compute if we should publish
          if [[ "${{ github.repository }}" == "$CANONICAL_REPO" ]] && \
             [[ "${{ github.ref }}" == "refs/heads/master" ]] && \
             [[ "${{ github.event_name }}" != "pull_request" ]]; then
            echo "SHOULD_PUBLISH=true" >> "$GITHUB_OUTPUT"
          else
            echo "SHOULD_PUBLISH=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Load matrix from matrix.yml
        id: load-matrix
        run: |
          # Install yq if not available
          if ! command -v yq &> /dev/null; then
            sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
            sudo chmod +x /usr/local/bin/yq
          fi

          # Read build_include from matrix.yml and convert to JSON
          BUILD_INCLUDE=$(yq eval '.build_include' matrix.yml -o=json -I=0)
          echo "build_include=$BUILD_INCLUDE" >> "$GITHUB_OUTPUT"

          # Read merge_include from matrix.yml and convert to JSON
          MERGE_INCLUDE=$(yq eval '.merge_include' matrix.yml -o=json -I=0)
          echo "merge_include=$MERGE_INCLUDE" >> "$GITHUB_OUTPUT"

          # Debug: Show what we loaded
          echo "Loaded build_include with $(echo "$BUILD_INCLUDE" | jq 'length') entries"
          echo "Loaded merge_include with $(echo "$MERGE_INCLUDE" | jq 'length') entries"
  make-docker-images:
    needs: setup
    strategy:
      matrix:
        include: ${{ fromJSON(needs.setup.outputs.build_include) }}

    name: "Build:${{ matrix.postgres }}-${{ matrix.postgis }}-${{ matrix.variant }} (${{ contains(matrix.runner-platform, 'arm') && 'arm64' || 'x86-64' }}) Docker image"
    runs-on: ${{ matrix.runner-platform }}
    continue-on-error: ${{ matrix.postgis == 'master' }}
    env:
      VERSION: ${{ matrix.postgres }}-${{ matrix.postgis }}
      VARIANT: ${{ matrix.variant }}
      # the "postgis/postgis" name is the expected test name; ( via ./test/postgis-config.sh )
      # changing it will break the official-images test script
      # this is only for CI test and not for Docker hub publishing
      CI_IMAGE_TAG: postgis/postgis:ci-${{ github.run_id }}-${{ matrix.postgres }}-${{ matrix.postgis }}-${{ matrix.variant }}-${{ contains(matrix.runner-platform, 'arm') && 'arm' || 'x64' }}

    steps:
    - name: Checkout source
      uses: actions/checkout@v5

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image for ${{ env.VERSION }} ${{ env.VARIANT }}
      id: build
      uses: docker/build-push-action@v5
      with:
        context: ${{ env.VERSION }}${{ env.VARIANT == 'alpine' && '/alpine' || ''}}
        file: ${{ env.VERSION }}${{ env.VARIANT == 'alpine' && '/alpine' || ''}}/Dockerfile
        tags: ${{ env.CI_IMAGE_TAG }}
        load: true
        push: false  # don't push until after testing

    - name: Check out official-images repo
      uses: actions/checkout@v5
      with:
        repository: docker-library/official-images
        path: official-images
        sparse-checkout: |
          test

    - name: Run official-images test script
      run: |
        ./official-images/test/run.sh -c ./official-images/test/config.sh -c test/postgis-config.sh "$CI_IMAGE_TAG" | tee test.log

    - name: Verify test results
      run: |
        if ! grep -q "'postgres-basics'.*passed" test.log || \
           ! grep -q "'postgres-initdb'.*passed" test.log || \
           ! grep -q "'postgis-basics'.*passed" test.log; then
          echo "ERROR: Required postgres/postgis tests did not pass!"
          exit 1
        fi
        echo "âœ“ All required tests passed"

    - name: Login to dockerhub
      id: login-dockerhub
      uses: docker/login-action@v3
      if: ${{ needs.setup.outputs.SHOULD_PUBLISH == 'true' }}
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

    - name: Push image by digest
      id: push
      uses: docker/build-push-action@v5  # Build is cached, this is really just a push
      if: ${{ needs.setup.outputs.SHOULD_PUBLISH == 'true' && steps.login-dockerhub.outcome == 'success' }}
      with:
        context: ${{ env.VERSION }}${{ env.VARIANT == 'alpine' && '/alpine' || ''}}
        file: ${{ env.VERSION }}${{ env.VARIANT == 'alpine' && '/alpine' || ''}}/Dockerfile
        outputs: type=image,"name=${{ env.DOCKERHUB_REPO }}",push-by-digest=true,name-canonical=true,push=true

    - name: Export digest
      if: ${{ steps.push.outcome == 'success' }}
      run: |
        mkdir -p ${{ runner.temp }}/digests
        digest="${{ steps.push.outputs.digest }}"
        touch "${{ runner.temp }}/digests/${digest#sha256:}"

    - name: Upload digests
      if: ${{ steps.push.outcome == 'success' }}
      uses: actions/upload-artifact@v4
      with:
        name: digests-${{ env.VERSION }}-${{ env.VARIANT }}-${{ matrix.runner-platform }}
        path: ${{ runner.temp }}/digests/*
        if-no-files-found: error
        retention-days: 10

  merge-manifests:
    name: "Merge:${{ matrix.postgres }}-${{ matrix.postgis }}-${{ matrix.variant }} manifests and push to DockerHub"
    needs: [setup, make-docker-images]
    runs-on: ubuntu-24.04-arm  # Always on arm, because why not
    if: ${{ needs.setup.outputs.SHOULD_PUBLISH == 'true' }}
    continue-on-error: ${{ matrix.postgis == 'master' }}
    env:
      VERSION: ${{ matrix.postgres }}-${{ matrix.postgis }}
      VARIANT: ${{ matrix.variant }}
    strategy:
      matrix:
        include: ${{ fromJSON(needs.setup.outputs.merge_include) }}

    steps:
    - name: Login to dockerhub
      id: login-dockerhub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Download digests
      uses: actions/download-artifact@v4
      with:
        path: ${{ runner.temp }}/digests
        pattern: digests-${{ env.VERSION }}-${{ env.VARIANT }}-*
        merge-multiple: true

    - name: Docker Metadata
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ env.DOCKERHUB_REPO }}
        tags: |
          type=raw,value=${{ env.VERSION }}${{ env.VARIANT == 'alpine' && '-alpine' || ''}}
          # Create 'latest' tag only for LATEST_DEFAULT_VERSION with default variant (multi-arch: amd64+arm64)
          type=raw,value=latest,enable=${{ env.VERSION == env.LATEST_DEFAULT_VERSION && env.VARIANT == 'default' }}

    - name: Create manifest list and push
      working-directory: ${{ runner.temp }}/digests
      run: |
        # shellcheck disable=SC2046
        docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
          $(printf '${{ env.DOCKERHUB_REPO }}@sha256:%s ' *)

    - name: Inspect image  # Purely for debugging
      run: |
        sleep 5
        docker buildx imagetools inspect ${{ env.DOCKERHUB_REPO }}:${{ env.VERSION }}${{ env.VARIANT == 'alpine' && '-alpine' || ''}}

  dockerHubDescription:
    needs: [merge-manifests]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout source
      uses: actions/checkout@v5

    - name: Prepare README with prefix
      run: |
        if [ -n "${{ env.DOCKERHUB_README_PREFIX }}" ]; then
          echo -e "${{ env.DOCKERHUB_README_PREFIX }}" > /tmp/dockerhub-readme.md
          cat README.md >> /tmp/dockerhub-readme.md
          mv /tmp/dockerhub-readme.md README.md
        fi

    - name: Update Docker Hub Description
      uses: peter-evans/dockerhub-description@v5
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}
        repository: ${{ env.DOCKERHUB_REPO }}
        short-description: "${{ env.DOCKERHUB_SHORT_DESCRIPTION }}"
        readme-filepath: ./README.md
